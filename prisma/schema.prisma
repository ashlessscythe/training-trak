// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Site model for multi-site scalability
model Site {
  id          String   @id @default(cuid())
  code        String   @unique // Site specific code
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@index([code])
}

// User model with role-based access
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String // Hashed password
  isActive  Boolean  @default(true)
  site      Site     @relation(fields: [siteId], references: [id])
  siteId    String
  role      Role     @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations for different user roles
  uploadedDocs      Document[]         @relation("DocumentUploader")
  approvedTrainings TrainingProgress[] @relation("TrainingApprover")
  trainings         TrainingProgress[] @relation("Trainee")
  createdSOPs       SOP[]              @relation("SOPCreator")
  lastModifiedSOPs  SOP[]              @relation("SOPLastModifier")

  @@index([email])
  @@index([siteId])
}

// SOP model with versioning
model SOP {
  id               String             @id @default(cuid())
  name             String
  description      String?
  version          String
  content          String? // Could be a URL or content
  isActive         Boolean            @default(true)
  createdBy        User               @relation("SOPCreator", fields: [createdById], references: [id])
  createdById      String
  lastModifiedBy   User               @relation("SOPLastModifier", fields: [lastModifiedById], references: [id])
  lastModifiedById String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  documents        Document[]
  trainings        TrainingProgress[]
  requiredRoles    Role[]

  @@unique([name, version]) // Unique constraint for name and version combination
  @@index([name])
  @@index([version])
  @@index([createdById])
  @@index([lastModifiedById])
}

// Training Progress model
model TrainingProgress {
  id           String         @id @default(cuid())
  user         User           @relation("Trainee", fields: [userId], references: [id])
  userId       String
  sop          SOP            @relation(fields: [sopId], references: [id])
  sopId        String
  status       TrainingStatus @default(IN_PROGRESS)
  completedAt  DateTime?
  approvedBy   User?          @relation("TrainingApprover", fields: [approvedById], references: [id])
  approvedById String?
  approvedAt   DateTime?
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
  @@index([sopId])
  @@index([approvedById])
  @@index([status])
}

// Document model for various types of documents
model Document {
  id           String       @id @default(cuid())
  name         String
  type         DocumentType
  url          String // Storage URL
  metadata     Json? // Flexible metadata storage
  sop          SOP?         @relation(fields: [sopId], references: [id])
  sopId        String?
  uploadedBy   User         @relation("DocumentUploader", fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([type])
  @@index([sopId])
  @@index([uploadedById])
}

// Enums
enum Role {
  OWNER
  ADMIN
  SUPERVISOR
  USER
  PENDING
}

enum TrainingStatus {
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum DocumentType {
  TRAINING_DOCUMENT
  SIGNATURE_SHEET
  SOP_DOCUMENT
  OTHER
}
